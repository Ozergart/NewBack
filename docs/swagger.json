{
  "swagger": "2.0",
  "info": {
    "description": "This api is for testing the swagger ui",
    "version": "1.0.7",
    "title": "Express API",
    "contact": {
      "email": "test@gmail.com"
    }
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "cars",
      "description": "Operations about cars"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Get me",
        "description": "This can only be done by the logged in user.",
        "operationId": "getMyUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [{"jwt_token": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update me",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateMyUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [{"jwt_token": []}],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "security": [{"jwt_token": []}],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/cars": {
      "get": {
        "tags": ["cars"],
        "summary": "Get cars",
        "description": "This can only be done by the logged in user.",
        "operationId": "getAllCars",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [{"jwt_token": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/cars/{id}": {
      "delete": {
        "tags": [
          "cars"
        ],
        "summary": "Delete car",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteCar",
        "security": [{"jwt_token": []}],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The car id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Car not found"
          }
        }
      },
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "Get car",
        "description": "This can only be done by the logged in user.",
        "operationId": "getCarById",
        "security": [{"jwt_token": []}],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The car id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    }

  },
"securityDefinitions": {
    "jwt_token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "UpdateUserDTO": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Updated name in the system",
          "type": "string"
        },
        "phone": {
          "description": "Updated phone number in the system",
          "type": "string"
        },
        "age": {
          "description": "Age in years",
          "type": "number"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "required": ["_id", "name", "email", "role", "isDeleted", "isVerified"],
      "properties": {
        "_id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier for a user"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "age": {
          "type": "number"
        },
        "phone": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["admin", "user"]
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "CarResponse": {
      "type": "object",
      "required": ["_id", "model", "brand", "price"],
      "properties": {
        "_id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier for a car"
        },
        "model": {
          "type": "string"
        },
        "brand": {
          "type": "string",
          "enum": ["Volvo","Volkswagen","Toyota","Ford","Mercedes","BMW","Kia","Audi"]
        },
        "price": {
          "type": "number"
        }
        }
      }
    }
  }

